# coding: utf-8

"""
    Internship API

    This API delivers data for the Internship project.  # noqa: E501

    OpenAPI spec version: 1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class CohortGet(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'url': 'str',
        'name': 'str',
        'description': 'str',
        'publication_start_date': 'str',
        'subscription_start_date': 'str',
        'subscription_end_date': 'str'
    }

    attribute_map = {
        'url': 'url',
        'name': 'name',
        'description': 'description',
        'publication_start_date': 'publication_start_date',
        'subscription_start_date': 'subscription_start_date',
        'subscription_end_date': 'subscription_end_date'
    }

    def __init__(self, url=None, name=None, description=None, publication_start_date=None, subscription_start_date=None, subscription_end_date=None):  # noqa: E501
        """CohortGet - a model defined in OpenAPI"""  # noqa: E501

        self._url = None
        self._name = None
        self._description = None
        self._publication_start_date = None
        self._subscription_start_date = None
        self._subscription_end_date = None
        self.discriminator = None

        if url is not None:
            self.url = url
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if publication_start_date is not None:
            self.publication_start_date = publication_start_date
        if subscription_start_date is not None:
            self.subscription_start_date = subscription_start_date
        if subscription_end_date is not None:
            self.subscription_end_date = subscription_end_date

    @property
    def url(self):
        """Gets the url of this CohortGet.  # noqa: E501


        :return: The url of this CohortGet.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this CohortGet.


        :param url: The url of this CohortGet.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def name(self):
        """Gets the name of this CohortGet.  # noqa: E501


        :return: The name of this CohortGet.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CohortGet.


        :param name: The name of this CohortGet.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this CohortGet.  # noqa: E501


        :return: The description of this CohortGet.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CohortGet.


        :param description: The description of this CohortGet.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def publication_start_date(self):
        """Gets the publication_start_date of this CohortGet.  # noqa: E501


        :return: The publication_start_date of this CohortGet.  # noqa: E501
        :rtype: str
        """
        return self._publication_start_date

    @publication_start_date.setter
    def publication_start_date(self, publication_start_date):
        """Sets the publication_start_date of this CohortGet.


        :param publication_start_date: The publication_start_date of this CohortGet.  # noqa: E501
        :type: str
        """

        self._publication_start_date = publication_start_date

    @property
    def subscription_start_date(self):
        """Gets the subscription_start_date of this CohortGet.  # noqa: E501


        :return: The subscription_start_date of this CohortGet.  # noqa: E501
        :rtype: str
        """
        return self._subscription_start_date

    @subscription_start_date.setter
    def subscription_start_date(self, subscription_start_date):
        """Sets the subscription_start_date of this CohortGet.


        :param subscription_start_date: The subscription_start_date of this CohortGet.  # noqa: E501
        :type: str
        """

        self._subscription_start_date = subscription_start_date

    @property
    def subscription_end_date(self):
        """Gets the subscription_end_date of this CohortGet.  # noqa: E501


        :return: The subscription_end_date of this CohortGet.  # noqa: E501
        :rtype: str
        """
        return self._subscription_end_date

    @subscription_end_date.setter
    def subscription_end_date(self, subscription_end_date):
        """Sets the subscription_end_date of this CohortGet.


        :param subscription_end_date: The subscription_end_date of this CohortGet.  # noqa: E501
        :type: str
        """

        self._subscription_end_date = subscription_end_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CohortGet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
