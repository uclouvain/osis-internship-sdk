# coding: utf-8

"""
    Internship API

    This API delivers data for the Internship project.  # noqa: E501

    OpenAPI spec version: 1.0.10
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Person(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'uuid': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'email': 'str',
        'gender': 'str',
        'birth_date': 'date'
    }

    attribute_map = {
        'uuid': 'uuid',
        'first_name': 'first_name',
        'last_name': 'last_name',
        'email': 'email',
        'gender': 'gender',
        'birth_date': 'birth_date'
    }

    def __init__(self, uuid=None, first_name=None, last_name=None, email=None, gender=None, birth_date=None):  # noqa: E501
        """Person - a model defined in OpenAPI"""  # noqa: E501

        self._uuid = None
        self._first_name = None
        self._last_name = None
        self._email = None
        self._gender = None
        self._birth_date = None
        self.discriminator = None

        if uuid is not None:
            self.uuid = uuid
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if email is not None:
            self.email = email
        if gender is not None:
            self.gender = gender
        if birth_date is not None:
            self.birth_date = birth_date

    @property
    def uuid(self):
        """Gets the uuid of this Person.  # noqa: E501


        :return: The uuid of this Person.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this Person.


        :param uuid: The uuid of this Person.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def first_name(self):
        """Gets the first_name of this Person.  # noqa: E501


        :return: The first_name of this Person.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Person.


        :param first_name: The first_name of this Person.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this Person.  # noqa: E501


        :return: The last_name of this Person.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Person.


        :param last_name: The last_name of this Person.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def email(self):
        """Gets the email of this Person.  # noqa: E501


        :return: The email of this Person.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Person.


        :param email: The email of this Person.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def gender(self):
        """Gets the gender of this Person.  # noqa: E501


        :return: The gender of this Person.  # noqa: E501
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this Person.


        :param gender: The gender of this Person.  # noqa: E501
        :type: str
        """

        self._gender = gender

    @property
    def birth_date(self):
        """Gets the birth_date of this Person.  # noqa: E501


        :return: The birth_date of this Person.  # noqa: E501
        :rtype: date
        """
        return self._birth_date

    @birth_date.setter
    def birth_date(self, birth_date):
        """Sets the birth_date of this Person.


        :param birth_date: The birth_date of this Person.  # noqa: E501
        :type: date
        """

        self._birth_date = birth_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Person):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
