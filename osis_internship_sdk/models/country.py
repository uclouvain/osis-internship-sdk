# coding: utf-8

"""
    Internship API

    This API delivers data for the Internship project.  # noqa: E501

    OpenAPI spec version: 1.0.10
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Country(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'url': 'str',
        'uuid': 'str',
        'iso_code': 'str',
        'name': 'str',
        'nationality': 'str'
    }

    attribute_map = {
        'url': 'url',
        'uuid': 'uuid',
        'iso_code': 'iso_code',
        'name': 'name',
        'nationality': 'nationality'
    }

    def __init__(self, url=None, uuid=None, iso_code=None, name=None, nationality=None):  # noqa: E501
        """Country - a model defined in OpenAPI"""  # noqa: E501

        self._url = None
        self._uuid = None
        self._iso_code = None
        self._name = None
        self._nationality = None
        self.discriminator = None

        if url is not None:
            self.url = url
        if uuid is not None:
            self.uuid = uuid
        if iso_code is not None:
            self.iso_code = iso_code
        if name is not None:
            self.name = name
        if nationality is not None:
            self.nationality = nationality

    @property
    def url(self):
        """Gets the url of this Country.  # noqa: E501


        :return: The url of this Country.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Country.


        :param url: The url of this Country.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def uuid(self):
        """Gets the uuid of this Country.  # noqa: E501


        :return: The uuid of this Country.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this Country.


        :param uuid: The uuid of this Country.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def iso_code(self):
        """Gets the iso_code of this Country.  # noqa: E501


        :return: The iso_code of this Country.  # noqa: E501
        :rtype: str
        """
        return self._iso_code

    @iso_code.setter
    def iso_code(self, iso_code):
        """Sets the iso_code of this Country.


        :param iso_code: The iso_code of this Country.  # noqa: E501
        :type: str
        """

        self._iso_code = iso_code

    @property
    def name(self):
        """Gets the name of this Country.  # noqa: E501


        :return: The name of this Country.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Country.


        :param name: The name of this Country.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def nationality(self):
        """Gets the nationality of this Country.  # noqa: E501


        :return: The nationality of this Country.  # noqa: E501
        :rtype: str
        """
        return self._nationality

    @nationality.setter
    def nationality(self, nationality):
        """Sets the nationality of this Country.


        :param nationality: The nationality of this Country.  # noqa: E501
        :type: str
        """

        self._nationality = nationality

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Country):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
