openapi: 3.0.0
info:
  version: "1.0.11"
  title: Internship API
  description: 'This API delivers data for the Internship project.'
  contact:
    name: 'UCLouvain - OSIS'
    url: https://github.com/uclouvain/osis

servers:
  - url: https://{environment}.osis.uclouvain.be/api/v1/internship/
    variables:
      environment:
        default: dev
        enum:
          - dev # Development server
          - qa # Staging server
          - test # Test server
  - url: https://osis.uclouvain.be/api/v1/internship/
    description: Production server

paths:
  /masters/:
    get:
      description: Obtain the list of internship masters
      parameters:
        - in: query
          name: search
          schema:
            type: string
          required: false
      responses:
        200:
          description: Successful get of the list of internship masters
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/Paging"
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/MasterGet'
    post:
      description: Create new internship master
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MasterGet'
      responses:
        200:
          description: Successfully created an internship master
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MasterGet'

  /masters/{uuid}:
    get:
      description: Obtain information about a specific master
      parameters:
        - in: path
          name: uuid
          required: true
          description: The UUID of the master
          schema:
            $ref: '#/components/schemas/Uuid'
      responses:
        200:
          description: Successful get of a master's data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MasterGet'

  /masters/{uuid}/activate_account/:
    put:
      description: Set master account activation status to ACTIVE
      parameters:
        - in: path
          name: uuid
          required: true
          description: The UUID of the master
          schema:
            $ref: '#/components/schemas/Uuid'
      responses:
        200:
          description: Successful master's account status update.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MasterGet'

  /masters/{uuid}/allocations/:
    get:
      description: Obtain the list of internship-master allocations
      parameters:
          - in: path
            name: uuid
            required: true
            description: The UUID of the master
            schema:
              $ref: '#/components/schemas/Uuid'
          - in: query
            name: current
            schema:
              type: boolean
            required: false
      responses:
        200:
          description: Successful get of the list of allocations
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/Paging"
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/AllocationGet'

  /masters_allocations/{uuid}:
    get:
      description: Obtain information about a specific master allocation
      parameters:
        - in: path
          name: uuid
          required: true
          description: The UUID of the master allocation
          schema:
            $ref: '#/components/schemas/Uuid'
      responses:
        200:
          description: Successful get of a master allocation's data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllocationGet'
    delete:
      description: Delete a master allocation
      parameters:
        - in: path
          name: uuid
          required: true
          description: The UUID of the master allocation
          schema:
            $ref: '#/components/schemas/Uuid'
      responses:
        200:
          description: Successful delete of a master allocation's data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllocationGet'

  /masters_allocations/{specialty}/{organization}:
    get:
      description: Obtain the list of master allocations filtered by specialty and organization
      parameters:
        - in: path
          name: organization
          schema:
            type: string
          required: true
        - in: path
          name: specialty
          schema:
            type: string
          required: true
        - in: query
          name: role
          schema:
            type: string
            default: all
          required: false
      responses:
        200:
          description: Successful get of the list of masters allocations
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/Paging"
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/SpecialtyGet'
    post:
      description: Create new internship allocation
      parameters:
        - in: path
          name: organization
          schema:
            type: string
          required: true
        - in: path
          name: specialty
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AllocationGet'
      responses:
        200:
          description: Successfully created an internship master allocation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllocationGet'

  /specialties:
    get:
      description: Obtain the list of specialties
      responses:
        200:
          description: Successful get of the list of specialties
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/Paging"
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/SpecialtyGet'

  /specialties/{uuid}:
    get:
      description: Obtain information about a specific specialty
      parameters:
        - in: path
          name: uuid
          required: true
          description: The UUID of the specialty
          schema:
            $ref: '#/components/schemas/Uuid'
      responses:
        200:
          description: Successful get of a specialty's data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpecialtyGet'

  /cohorts:
    get:
      description: Obtain the list of cohorts
      responses:
        200:
          description: Successful get of the list of cohorts
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/Paging"
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/CohortGet'

  /cohorts/{uuid}:
    get:
      description: Obtain information about a specific cohort
      parameters:
        - in: path
          name: uuid
          required: true
          description: The UUID of the cohort
          schema:
            $ref: '#/components/schemas/Uuid'
      responses:
        200:
          description: Successful get of a cohort's data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CohortGet'

  /organizations:
    get:
      description: Obtain the list of organizations
      responses:
        200:
          description: Successful get of the list of organizations
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/Paging"
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/OrganizationGet'

  /organizations/{uuid}:
    get:
      description: Obtain information about a specific organization
      parameters:
        - in: path
          name: uuid
          required: true
          description: The UUID of the organization
          schema:
            $ref: '#/components/schemas/Uuid'
      responses:
        200:
          description: Successful get of an organization's data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationGet'

  /internships:
    get:
      description: Obtain the list of internships
      responses:
        200:
          description: Successful get of the list of internships
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/Paging"
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/InternshipGet'

  /internships/{uuid}:
    get:
      description: Obtain information about a specific internship
      parameters:
        - in: path
          name: uuid
          required: true
          description: The UUID of the internship
          schema:
            $ref: '#/components/schemas/Uuid'
      responses:
        200:
          description: Successful get of an internship's data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternshipGet'

  /periods:
    get:
      description: Obtain the list of periods
      parameters:
        - in: query
          name: active
          schema:
            type: boolean
          required: false
      responses:
        200:
          description: Successful get of the list of periods
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/Paging"
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/PeriodGet'

  /periods/{uuid}:
    get:
      description: Obtain information about a specific period
      parameters:
        - in: path
          name: uuid
          required: true
          description: The UUID of the period
          schema:
            $ref: '#/components/schemas/Uuid'
      responses:
        200:
          description: Successful get of a period's data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PeriodGet'

  /students:
    get:
      description: Obtain the list of students
      responses:
        200:
          description: Successful get of the list of students
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/Paging"
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/StudentGet'

  /students/{uuid}:
    get:
      description: Obtain information about a specific internship student
      parameters:
        - in: path
          name: uuid
          required: true
          description: The UUID of the internship student
          schema:
            $ref: '#/components/schemas/Uuid'
      responses:
        200:
          description: Successful get of a internship student's data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudentGet'

  /students_affectations/{specialty}/{organization}:
    get:
      description: Obtain the list of students affectations
      parameters:
        - in: path
          name: organization
          schema:
            type: string
          required: true
        - in: path
          name: specialty
          schema:
            type: string
          required: true
        - in: query
          name: period
          schema:
            type: string
            default: all
          required: false
        - in: query
          name: with_score
          schema:
            type: boolean
            default: false
          required: false
        - in: query
          name: limit
          schema:
            type: integer
          required: false
        - in: query
          name: offset
          schema:
            type: integer
          required: false

      responses:
        200:
          description: Successful get of the list of students affectations
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/Paging"
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/StudentAffectationGet'

  /students_affectations/{uuid}:
    get:
      description: Obtain information about a specific student's affectation
      parameters:
        - in: path
          name: uuid
          required: true
          description: The UUID of the student's affectation
          schema:
            $ref: '#/components/schemas/Uuid'
      responses:
        200:
          description: Successful get of a student's affectation's data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudentAffectationGet'

  /scores/{student_uuid}/{period_uuid}:
    get:
      description: Get or create information about a specific student's score for a given period
      parameters:
        - in: path
          name: student_uuid
          required: true
          description: The UUID of the student
          schema:
            $ref: '#/components/schemas/Uuid'
        - in: path
          name: period_uuid
          required: true
          description: The UUID of the period
          schema:
            $ref: '#/components/schemas/Uuid'
      responses:
        200:
          description: Successful get or create of a student's score for a given period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScoreGet'
    put:
      description: Update a student's score for a given period
      parameters:
        - in: path
          name: student_uuid
          required: true
          description: The UUID of the student
          schema:
            $ref: '#/components/schemas/Uuid'
        - in: path
          name: period_uuid
          required: true
          description: The UUID of the period
          schema:
            $ref: '#/components/schemas/Uuid'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScoreGet'
      responses:
        201:
          description: Successful update of a score for a given period


  /scores/{affectation_uuid}/validate:
    get:
      description: Validate a score
      parameters:
        - in: path
          name: affectation_uuid
          required: true
          description: The UUID of the period
          schema:
            $ref: '#/components/schemas/Uuid'
      responses:
        200:
          description: Successfully validated an internship score
        404:
          description: Affectation or score not found, validation aborted
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: The message describing the error

components:
  securitySchemes:
    Token:
      type: apiKey
      in: header
      name: Authorization
      description: Enter your token in the format **Token &lt;token>**

  schemas:
    MasterGet:
      type: object
      properties:
          url:
            type: string
            format: uri
          uuid:
            $ref: '#/components/schemas/Uuid'
          person:
            $ref: '#/components/schemas/Person'
          civility:
            type: string
            example: "DOCTOR"


    AllocationGet:
      type: object
      properties:
        url:
          type: string
          format: uri
        uuid:
          $ref: '#/components/schemas/Uuid'
        master:
          $ref: '#/components/schemas/MasterGet'
        organization:
          $ref: '#/components/schemas/OrganizationGet'
        specialty:
          $ref: '#/components/schemas/SpecialtyGet'
        role:
          type: string
          example: "MASTER"

    SpecialtyGet:
      type: object
      properties:
        url:
          type: string
          format: uri
        uuid:
          $ref: '#/components/schemas/Uuid'
        name:
          type: string
          example: "Xyzetologie"
        acronym:
          type: string
          example: "XYZ"
        mandatory:
          type: boolean
          example: true
        sequence:
          type: integer
          example: 1
        cohort:
          $ref: '#/components/schemas/CohortGet'
        selectable:
          type: boolean
          example: true

    CohortGet:
      type: object
      properties:
        url:
          type: string
          format: uri
        name:
          type: string
          example: "R6-2021"
        description:
          type: string
          example: "Student cohort for academic year 2020-2021"
        publication_start_date:
          type: string
          example: 01/04/2020
        subscription_start_date:
          type: string
          example: 01/02/2020
        subscription_end_date:
          type: string
          example: 01/03/2020

    OrganizationGet:
      type: object
      properties:
        url:
          type: string
          format: uri
        uuid:
          $ref: '#/components/schemas/Uuid'
        name:
          type: string
          example: "CHU XYZ"
        acronym:
          type: string
          example: "XYZ"
        website:
          type: string
          example: "www.chuxyz.be"
        reference:
          type: string
          example: "01"
        phone:
          type: string
          example: "01/01.01.01"
        location:
          type: string
          example: "Rue de l'hôpital"
        postal_code:
          type: string
          example: "1000"
        city:
          type: string
          example: "Bruxelles"
        country:
          $ref: '#/components/schemas/Country'
        cohort:
          $ref: '#/components/schemas/CohortGet'

    InternshipGet:
      type: object
      properties:
        url:
          type: string
          format: uri
        name:
          type: string
          example: "XYZ"
        speciality:
          $ref: '#/components/schemas/SpecialtyGet'
        cohort:
          $ref: '#/components/schemas/CohortGet'
        length_in_periods:
          type: integer
          example: 1
        position:
          type: integer
          example: 1

    StudentGet:
      type: object
      properties:
        url:
          type: string
          format: uri
        person:
          $ref: '#/components/schemas/Person'
        location:
          type: string
          example: "Rue de la maison, 10"
        postal_code:
          type: string
          example: "1000"
        city:
          type: string
          example: "Bruxelles"
        country:
          type: string
          example: "Belgique"
        email:
          type: string
          example: "jean.pondu@mail.be"
        phone_mobile:
          type: string
          example: "0411/11.11.11"
        contest:
          type: string
          example: "SPECIALIST"
        cohort:
          $ref: '#/components/schemas/CohortGet'
        evolution_score:
          type: number
          example: 17
        evolution_score_reason:
          type: string
          example: "reason"

    PeriodGet:
      type: object
      properties:
        url:
          type: string
          format: uri
        uuid:
          $ref: '#/components/schemas/Uuid'
        name:
          type: string
          example: "P1"
        date_start:
          type: string
          example: "01/02/2020"
        date_end:
          type: string
          example: "01/03/2020"

    StudentAffectationGet:
      type: object
      properties:
        url:
          type: string
          format: uri
        student:
          $ref: '#/components/schemas/Student'
        organization:
          $ref: '#/components/schemas/OrganizationGet'
        specialty:
          $ref: '#/components/schemas/SpecialtyGet'
        period:
          $ref: '#/components/schemas/PeriodGet'
        internship:
          $ref: '#/components/schemas/InternshipGet'

    ScoreGet:
      type: object
      properties:
        uuid:
          $ref: '#/components/schemas/Uuid'
        student:
          $ref: '#/components/schemas/Student'
        period:
          $ref: '#/components/schemas/PeriodGet'
        cohort:
          $ref: '#/components/schemas/CohortGet'
        excused:
          type: boolean
        reason:
          type: string
        score:
          type: number
        comments:
          type: object
        objectives:
          type: object
        validated:
          type: boolean
        APD_1:
          type: string
        APD_2:
          type: string
        APD_3:
          type: string
        APD_4:
          type: string
        APD_5:
          type: string
        APD_6:
          type: string
        APD_7:
          type: string
        APD_8:
          type: string
        APD_9:
          type: string
        APD_10:
          type: string
        APD_11:
          type: string
        APD_12:
          type: string
        APD_13:
          type: string
        APD_14:
          type: string
        APD_15:
          type: string


    Uuid:
      type: string
      format: uuid
      example: "abcd-efgh-ijkl-mnop-1234-5678"

    Student:
      type: object
      properties:
        uuid:
          $ref: '#/components/schemas/Uuid'
        registration_id:
          type: string
          example: "44444444444"
        person:
          $ref: '#/components/schemas/Person'

    Person:
      type: object
      properties:
        uuid:
          $ref: '#/components/schemas/Uuid'
        first_name:
          type: string
          example: "Dupont"
        last_name:
          type: string
          example: "Jacques"
        email:
          type: string
          example: "jacques.dupont@mail.xyz"
        gender:
          type: string
          example: "M"
        birth_date:
          type: string
          format: date
          example: "1989-01-01"

    Country:
      type: object
      properties:
        url:
          type: string
          format: uri
        uuid:
          $ref: '#/components/schemas/Uuid'
        iso_code:
          type: string
          example: "BE"
        name:
          type: string
          example: "Belgium"
        nationality:
          type: string
          example: "Belgian"

    Paging:
      properties:
        count:
          type: number
        next:
          type: string
        previous:
          type: string

security:
  - Token: []
